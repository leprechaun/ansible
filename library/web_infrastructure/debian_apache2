#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2013, Lawrence MacGuire
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
#
DOCUMENTATION = """
module: debian_apache2
short_description: Manage debian apache2 virtual hosts and modules
description:
  - Enable and disable apache2 modules
  - Enable and disable apache2 virtual hosts
options:
  option:
    required: true
    choices: [enabled, disabled]
    description:
      - enable or disable action item
  option:
    required: true
    choices: [mod, site]
    description:
      - Set either a virtual host (site) or module (mod) to be acted upon
  name:
    required: true
    description:
      - name of the site or module to act upon
notes:
  - "This module depends on the debian (and derivatives) scripts a2(en|dis)(mod|site)"
author: Lawrence MacGuire
"""

EXAMPLES = """
# Enable virtual host
- debian_apache2: option=site name=example.com state=enabled
# Disable virtual host
- debian_apache2: option=site name=example.com state=disabled
# Disable module
- debian_apache2: option=mod name=rewrite state=disabled
# Enable module
- debian_apache2: option=mod name=rewrite state=enabled
"""


import os
from distutils.version import StrictVersion
import subprocess


def _run_and_expect(cmd, erc, ert):
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    p.wait()

    rc = p.returncode
    rt = p.stdout.readline().strip()

    return (rt, ert[rt])

def site_enabled(name):
    ert = {
        'Site ' + name + ' already enabled': False,
        'Enabling site ' + name + ".": True,

    }
    return _run_and_expect(['a2ensite', name], 0, ert)

def site_disabled(name):
    ert = {
        'Site ' + name + ' already disabled': False,
        'Site ' + name + " disabled.": True,

    }
    return _run_and_expect(['a2dissite', name], 0, ert)

def mod_enabled(name):
    ert = {
        'Module ' + name + ' already enabled': False,
        'Enabling module ' + name + ".": True,

    }
    return _run_and_expect(['a2enmod', name], 0, ert)

def mod_disabled(name):
    ert = {
        'Module ' + name + ' already disabled': False,
        'Module ' + name + " disabled.": True,

    }
    return _run_and_expect(['a2dismod', name], 0, ert)


def main():
    arg_spec = dict(
        option=dict(required=True,choices=['site', 'mod']),
        name=dict(required=True),
        state=dict(required=False, default="enabled", choices=['enabled', 'disabled']),
    )
    module = AnsibleModule(argument_spec=arg_spec,
                           add_file_common_args=True,
                           supports_check_mode=True)

    option = module.params['option']
    name = module.params['name']
    state = module.params['state']

    try:
        if option == "mod":
            if state == "enabled":
                (msg, changed) = mod_enabled(name)
            elif state == "disabled":
                (msg, changed) = mod_disabled(name)
            else:
                module.fail_json(msg="Invalid mod state: %s" % state)

        elif option == "site":
            if state == "enabled":
                (msg, changed) = site_enabled(name)
            elif state == "disabled":
                (msg, changed) = site_disabled(name)
            else:
                module.fail_json(msg="Invalid site state: %s" % state)

        else:
            module.fail_json(msg="Invalid option")

        module.exit_json(msg=msg, changed=changed)
    except Exception, e:
        module.fail_json(msg=str(e))

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

if __name__ == '__main__':
    main()
